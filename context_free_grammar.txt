Program -> int main ( ) Block
Type -> int
Type -> float
Block -> { Stmts }
Block -> Stmt
Stmts -> { Stmts }
Stmts -> Stmt Stmts
Stmts -> Stmt
Stmts -> ε
Stmt -> Expr ;
Stmt -> ;
Stmt -> return num ;
Stmt -> break ;
Stmt -> scanf ( SStmt )
SStmt -> var SVar
SVar -> , var SVar
SVar -> ε
Stmt -> printf ( PStmt )
PStmt -> var PVar
PStmt -> num PVar
PVar -> , var PVar
PVar -> , num PVar
PVar -> ε
Stmt -> if ( Expr ) Stmts
Stmt -> if ( Expr ) Stmts else Stmts
Stmt -> while ( Expr ) Stmts
Stmt -> do Stmts while ( Expr )
Stmt -> for ( Expr ; Expr ; Expr ) Stmts
Stmt -> switch ( Expr ) { Cases }
Cases -> case num : Stmts Cases
Cases -> ε
Stmt -> Assign
Assign -> Type Vars MVars;
Vars -> var
Vars -> var = Expr
MVars -> ε
MVars -> , Vars MVars
OpMath1 -> *
OpMath1 -> /
OpMath1 -> %
OpMath2 -> +
OpMath2 -> -
OpMath3 -> ^
OpSingle -> +=
OpSingle -> -=
OpSingle -> /=
OpSingle -> *=
OpSingle -> %=
OpSelf -> ++
OpSelf -> --
OpJudge1 -> >
OpJudge1 -> <
OpJudge1 -> >=
OpJudge1 -> <=
OpJudge2 -> ==
OpJudge2 -> !=
Expr -> var 
Expr -> Expr10 
Expr1 -> ( Expr )
Expr2 -> Expr1
Expr2 -> var OpSelf
Expr2 -> OpSelf var
Expr2 -> ! Expr
Expr3 -> Expr2
Expr3 -> Expr2 OpMath1 Expr3
Expr4 -> Expr3
Expr4 -> Expr3 OpMath2 Expr4
Expr5 -> Expr4
Expr5 -> Expr4 OpJudge1 Expr5
Expr6 -> Expr5
Expr6 -> Expr5 OpJudge2 Expr6
Expr7 -> Expr6
Expr7 -> Expr6 OpMath3 Expr7
Expr8 -> Expr7
Expr8 -> Expr7 && Expr8
Expr9 -> Expr8
Expr9 -> Expr8 || Expr9
Expr10 -> Expr9
Expr10 -> var OpSingle Expr10